{"version":3,"sources":["angular-pure-datepicker.js"],"names":["xDateCore","selectedDt","startDt","endDt","x","Config","isUtc","direction","d","m","y","defaultYearsCount","daysList","monthList","CommonUtils","isValidNumber","num","isNumber","isNaN","parseFloat","isNotInfinity","isFinite","getArrayOfNumbers","start","end","this","isReverse","targetLength","arr","Array","newArr","apply","result","map","n","reverse","intArraySort","desc","a","b","DESC","sort","ListsState","exports","list","reloadYearsList","YearsUtils","getYearsList","reloadMonthList","MonthUtils","getMonthList","reloadDaysList","DaysUtils","getDaysList","DateModel","dt","Number","DateUtils","getDay","dow","getDayOfWeek","getMonth","getYear","tz","Date","getTimezoneOffset","getVal","method","date","call","prototype","getUTCDate","getDate","getUTCDay","getUTCFullYear","getFullYear","getUTCMonth","getDaysInMonth","month","year","isValidModel","model","isDateUpperStartLimit","isDateLowerEndLimit","isDateBetweenLimits","START_DAY","lastDayInMonth","State","selected","isStart","isExist","isEnd","isYearOfLowerLimit","isYearOfUpperLimit","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","setSelected","isUpperStart","isDtUpperStart","isDtEqualStart","isDtLowerEnd","isDtEqualEnd","isEqualStart","isLowerEnd","isEqualEnd","setStart","setEnd","setLimits","resetNow","now","START_MONTH","END_MONTH","_getLatestPossibleYear","yearsCount","selectedY","nowY","_getFirstPossibleYear","_getRangeValues","startY","endY","YEARS_COUNT","latestPossibleYear","firstPossibleYear","statement","isBoth","isBothNot","isOnlyStart","isOnlyEnd","isStartLower","isEndLower","isStartEqualEnd","isEndUpperNow","isEndEqualNow","from","to","range","angular","module","directive","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdLocalization","apdIsUtc","link","copyObj","obj","JSON","parse","stringify","getDt","_initData","modelDt","lists","day","run","$templateCache","put"],"mappings":"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","file":"angular-pure-datepicker.min.js","sourcesContent":["var xDateCore = function(selectedDt, startDt, endDt) {\n  'use strict';\n\n  var x = {\n    Config: {\n      isUtc: false,\n      direction: {\n        d: 'asc',\n        m: 'asc',\n        y: 'desc'\n      },\n      defaultYearsCount: 30,\n      daysList: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      monthList: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    },\n\n    CommonUtils: {\n      isValidNumber: function(num) {\n        var isNumber = !isNaN(parseFloat(num));\n        var isNotInfinity = isFinite(num);\n        return isNumber && isNotInfinity;\n      },\n      getArrayOfNumbers: function(start, end) {\n        //TODO (S.Panfilov) check this in after build\n        //if (!exports.isValidNumber(start) || !exports.isValidNumber(end)) return [];\n        if (!this.isValidNumber(start) || !this.isValidNumber(end)) return [];\n\n        var isReverse = (start > end);\n        var targetLength = isReverse ? (start - end) + 1 : (end - start) + 1;\n        var arr = new Array(targetLength);\n        var newArr = Array.apply(null, arr);\n        var result = newArr.map(function(d, n) {\n          return (isReverse) ? n + end : n + start;\n        });\n\n        return (isReverse) ? result.reverse() : result;\n      },\n      intArraySort: function(arr, direction) {\n        var DESC = 'desc';\n\n        function desc(a, b) {\n          return b - a;\n        }\n\n        switch (direction) {\n          default: return arr.sort(function(a, b) {\n            return a - b;\n          });\n          case DESC:\n              return arr.sort(desc);\n        }\n      }\n    },\n    ListsState: function() {\n      var exports = {\n        list: {\n          y: null,\n          m: null,\n          d: null\n        },\n        reloadYearsList: function() {\n          exports.list.y = x.YearsUtils.getYearsList();\n        },\n        reloadMonthList: function() {\n          exports.list.m = x.MonthUtils.getMonthList();\n        },\n        reloadDaysList: function() {\n          exports.list.d = x.DaysUtils.getDaysList();\n        }\n      };\n\n      exports.list.y = x.YearsUtils.getYearsList();\n      exports.list.m = x.MonthUtils.getMonthList();\n      exports.list.d = x.DaysUtils.getDaysList();\n\n      //TODO (S.Panfilov) perhaps we should watch model and limits value here and update them\n\n      return exports;\n    },\n\n    DateModel:\n      (function() {\n        return function DateModel(dt) {\n          if (!dt || Number.isNaN(+dt) || !Number.isFinite(+dt)) throw 'NaN or null';\n          this.d = x.DateUtils.getDay(+dt);\n          this.dow = x.DateUtils.getDayOfWeek(+dt);\n          this.m = x.DateUtils.getMonth(+dt);\n          this.y = x.DateUtils.getYear(+dt);\n          this.dt = +dt;\n          this.tz = new Date(+dt).getTimezoneOffset();\n\n          return this;\n        };\n      })(),\n\n    DateUtils:\n      (function() {\n\n        function getVal(dt, method) {\n          var date = new Date(+dt);\n          return (date && method) ? method.call(date) : null;\n        }\n\n        var exports = {\n          getDay: function(dt) {\n            if (!dt && dt !== 0) return null;\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCDate : Date.prototype.getDate;\n            return getVal(dt, method);\n          },\n          getDayOfWeek: function(dt) {\n            if (!dt && dt !== 0) return null;\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCDay : Date.prototype.getDay;\n            return getVal(dt, method);\n          },\n          getYear: function(dt) {\n            if (!dt && dt !== 0) return null;\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCFullYear : Date.prototype.getFullYear;\n            return getVal(dt, method);\n          },\n          getMonth: function(dt) {\n            if (!dt && dt !== 0) return null;\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCMonth : Date.prototype.getMonth;\n            return getVal(dt, method);\n          },\n          getDaysInMonth: function(month, year) {\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCDate : Date.prototype.getDate;\n            return method.call(new Date(+year, (+month) + 1, 0));\n          },\n          isValidModel: function(model) {\n            return !!model && (!!model.dt || model.dt === 0) && !Number.isNaN(+model.dt) && Number.isFinite(+model.dt);\n          },\n          isDateUpperStartLimit: function(dt, start) {\n            if (!start) return true;\n            if ((!dt && dt !== 0) || Number.isNaN(+dt) || Number.isNaN(+start)) throw 'NaN or null';\n            return (+dt > +start);\n          },\n          isDateLowerEndLimit: function(dt, end) {\n            if (!end) return true;\n            if (Number.isNaN(+dt) || Number.isNaN(+end)) throw 'NaN or null';\n            return (+dt < +end);\n          },\n          isDateBetweenLimits: function(dt, start, end) {\n            return (exports.isDateUpperStartLimit(dt, start) && exports.isDateLowerEndLimit(dt, end));\n          }\n        };\n\n\n        return exports;\n      })(),\n\n    DaysUtils: {\n      getDaysList: function() {\n        var result;\n        var START_DAY = 1;\n\n        var lastDayInMonth = x.DateUtils.getDaysInMonth(x.State.selected.y, x.State.selected.y);\n\n        var isStart = x.State.start.isExist;\n        var isEnd = x.State.end.isExist;\n\n        if (isStart || isEnd) {\n          var isYearOfLowerLimit = (isStart) ? x.State.start.y === x.State.selected.y : false;\n          var isYearOfUpperLimit = (isEnd) ? x.State.end.y === x.State.selected.y : false;\n          var isMonthOfLowerLimit = (isStart) ? x.State.start.m === x.State.selected.y : false;\n          var isMonthOfUpperLimit = (isEnd) ? x.State.end.m === x.State.selected.y : false;\n\n          var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n          var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n\n          var start = (isStart) ? x.State.start.d : START_DAY;\n          var end = (isEnd) ? x.State.end.d : lastDayInMonth;\n\n          if (isLowerLimit && isUpperLimit) {\n            result = x.CommonUtils.getArrayOfNumbers(start, end);\n          } else if (isLowerLimit && !isUpperLimit) {\n            result = x.CommonUtils.getArrayOfNumbers(start, lastDayInMonth);\n          } else if (!isLowerLimit && isUpperLimit) {\n            result = x.CommonUtils.getArrayOfNumbers(START_DAY, end);\n          } else { // in all other cases return array of 12 month\n            result = x.CommonUtils.getArrayOfNumbers(START_DAY, lastDayInMonth);\n          }\n        } else { // in all other cases return array of 12 month\n          result = x.CommonUtils.getArrayOfNumbers(START_DAY, lastDayInMonth);\n        }\n\n        return x.CommonUtils.intArraySort(result, x.Config.direction.d);\n      }\n    },\n\n    State: {\n      selected: {}, //TODO (S.Panfilov) refactor selected\n      setSelected: function(dt) {\n        var result;\n\n        var cases = {\n          isDtUpperStart: (dt > this.start.dt),\n          isDtEqualStart: (dt === this.start.dt),\n          isDtLowerEnd: (dt > this.end.dt),\n          isDtEqualEnd: (dt === this.end.dt)\n        };\n\n        //if (!this.start.isExist && !this.end.isExist) { //start == null; model == 1; end == null\n        //  result = dt;\n        //} else if (this.start.isExist && this.end.isExist) {//Start Limit\n        //  if (!cases.isDtUpperStart) { //start == 1; model == 0\n        //    result = this.start.dt;\n        //  } else {\n        //    result = dt;//start == 1; model == 1 or 2\n        //  }\n        //} else if (!this.start.isExist && this.end.isExist) {//End Limit\n        //  if (!cases.isDtLowerEnd) { //model == 4; end == 3;\n        //    result = this.end.dt;\n        //  } else {\n        //    result = dt;//model == 2 or 3; end == 3;\n        //  }\n        //} else if (this.start.isExist && this.end.isExist) {//Both Limits\n        //  if ((cases.isDtUpperStart || cases.isDtEqualStart) || (cases.isDtLowerEnd || cases.isDtEqualEnd)) {//start == 1; model == 1 or 2 or 3; end == 3;\n        //    result = dt;\n        //  }\n        //}\n\n        var isUpperStart = (dt > this.start.dt);\n        var isEqualStart = (dt === this.start.dt);\n        var isLowerEnd = (dt > this.end.dt);\n        var isEqualEnd = (dt === this.end.dt);\n\n        if ((isUpperStart || isEqualStart) || (isLowerEnd || isEqualEnd)) {\n          result = dt;\n        } else if (!isUpperStart) { //start == 1; model == 0\n          result = this.start;\n        } else if (!isUpperStart) { //model == 4; end == 3;\n          result = this.end.dt;\n        } else { //paranoid case\n          result = +(new Date());\n        }\n\n\n        this.selected = new x.DateModel(result);\n      },\n      start: {},\n      setStart: function(dt) {\n        if (!dt && dt !== 0) return;\n        this.start = new x.DateModel(dt);\n        this.start.isExist = true;\n      },\n      end: {},\n      setEnd: function(dt) {\n        if (!dt && dt !== 0) return;\n        this.end = new x.DateModel(dt);\n        this.end.isExist = true;\n      },\n      setLimits: function(start, end) {\n        this.setStart(start);\n        this.setEnd(end);\n      },\n      resetNow: function() {\n        this.now = new x.DateModel(+(new Date()));\n      },\n      now: null // new x.DateModel(+(new Date())) //TODO (S.Panfilov) FIX it - x is undefined\n    },\n\n    MonthUtils: {\n      getMonthList: function() {\n        var result;\n        var START_MONTH = 0;\n        var END_MONTH = 11;\n\n        var isStart = x.State.start.isExist;\n        var isEnd = x.State.end.isExist;\n\n        if (isStart || isEnd) {\n          var isYearOfLowerLimit = (isStart) ? x.State.start.y === x.State.selected.y : false;\n          var isYearOfUpperLimit = (isEnd) ? x.State.end.y === x.State.selected.y : false;\n          var start = (isStart) ? x.State.start.m : START_MONTH;\n          var end = (isEnd) ? x.State.end.m : END_MONTH;\n\n          // startYear == 2015, nowYear == 2015, endYear == 2015\n          if (isYearOfLowerLimit && isYearOfUpperLimit) {\n            result = x.CommonUtils.getArrayOfNumbers(start, end);\n          } else if (isYearOfLowerLimit && !isYearOfUpperLimit) { // startYear == 2015, nowYear == 2015, endYear == 2016 (or null)\n            result = x.CommonUtils.getArrayOfNumbers(start, END_MONTH);\n          } else if (!isYearOfLowerLimit && isYearOfUpperLimit) { // startYear == 2014 (or null), nowYear == 2015, endYear == 2015\n            result = x.CommonUtils.getArrayOfNumbers(START_MONTH, end);\n          } else { // in all other cases return array of 12 month\n            result = x.CommonUtils.getArrayOfNumbers(START_MONTH, END_MONTH);\n          }\n        } else { // in all other cases return array of 12 month\n          result = x.CommonUtils.getArrayOfNumbers(START_MONTH, END_MONTH);\n        }\n\n        return x.CommonUtils.intArraySort(result, x.Config.direction.m);\n      }\n    },\n\n    YearsUtils:\n      (function() {\n\n        function _getLatestPossibleYear(yearsCount, selectedY, nowY) {\n          var result = (selectedY > nowY) ? selectedY : nowY;\n          result += (yearsCount - 1);\n          return result;\n        }\n\n        function _getFirstPossibleYear(yearsCount, selectedY, nowY) {\n          var result = (selectedY < nowY) ? selectedY : nowY;\n          result -= (yearsCount - 1);\n          return result;\n        }\n\n        function _getRangeValues(selectedY, startY, endY, nowY) {\n\n          var YEARS_COUNT = x.Config.defaultYearsCount;\n          var latestPossibleYear = _getLatestPossibleYear(YEARS_COUNT, selectedY, nowY);\n          var firstPossibleYear = _getFirstPossibleYear(YEARS_COUNT, selectedY, nowY);\n\n          var statement = {\n            isBoth: !!(startY && endY),\n            isBothNot: !!(!startY && !endY),\n            isOnlyStart: !!(startY && !endY),\n            isOnlyEnd: !!(!startY && endY),\n            isStartLower: (startY < endY),\n            isEndLower: (startY > endY),\n            isStartEqualEnd: (startY === endY),\n            isEndUpperNow: (endY > nowY),\n            isEndEqualNow: (endY === nowY)\n          };\n\n          //start = 2011, end = 2014\n          if (statement.isBoth && statement.isStartLower) {\n            return {\n              from: startY,\n              to: endY\n            };\n          }\n\n          //start = 2014, end = 2011\n          if (statement.isBoth && statement.isEndLower) {\n            return {\n              from: endY,\n              to: startY\n            };\n          }\n\n          //start = 2011, end = 2011\n          if (statement.isBoth && statement.isStartEqualEnd) {\n            return {\n              from: startY,\n              to: endY\n            };\n          }\n\n          //start = 2014, end = null\n          if (statement.isOnlyStart) {\n            return {\n              from: startY,\n              to: latestPossibleYear\n            };\n          }\n\n          //start = null, end = 2014\n          if (statement.isOnlyEnd) {\n            //start = null, now = 2013 (or 2014), end = 2014\n            if (statement.isEndUpperNow || statement.isEndEqualNow) {\n              //TODO (S.Panfilov) wtf? I cannot remember wtf this statement check\n              if ((firstPossibleYear - YEARS_COUNT) > (endY - YEARS_COUNT)) {\n                return {\n                  from: firstPossibleYear,\n                  to: endY\n                };\n              } else {\n                return {\n                  from: endY - (YEARS_COUNT - 1),\n                  to: endY\n                };\n              }\n            }\n\n            //start = null, now = 2015,  end = 2014\n            if (!statement.isEndUpperNow) {\n              return {\n                from: endY - (YEARS_COUNT - 1),\n                to: endY\n              };\n            }\n          }\n\n          //start = null, end = null\n          if (statement.isBothNot) {\n            return {\n              from: firstPossibleYear,\n              to: latestPossibleYear\n            };\n          }\n        }\n\n        var exports = {\n          getYearsList: function() {\n            var range = _getRangeValues(x.State.selected.y, x.State.start.y, x.State.end.y, x.State.now.y);\n            var result = x.CommonUtils.getArrayOfNumbers(range.from, range.to);\n\n            return x.CommonUtils.intArraySort(result, x.Config.direction.y);\n          }\n        };\n\n\n        return exports;\n      })()\n  };\n  x.State.resetNow();\n  x.State.setLimits(startDt, endDt);\n  x.State.setSelected(selectedDt);\n  return x;\n};\n'use strict';\n\nangular.module('angular-pd', [\n      'angular-pd.templates'\n    ])\n\n    .directive('pureDatepicker', function () {\n      return {\n        restrict: 'E',\n        replace: true,\n        templateUrl: 'apd.html',\n        scope: {\n          ngModel: '=',\n          apdStart: '=?',\n          apdEnd: '=?',\n          apdLocalization: '=?',\n          apdIsUtc: '=?'\n        },\n        link: function (scope) {\n          scope.apdIsUtc = scope.apdIsUtc || false;\n\n          //var ngModelWatcher = {\n          //  handler: null,\n          //  start: function (callback) {\n          //    ngModelWatcher.handler = scope.$watch('ngModel.dt', function (value, oldValue) {\n          //      if (callback) {\n          //        callback(value, oldValue)\n          //      }\n          //\n          //    }, true);\n          //  },\n          //  stop: function () {\n          //    ngModelWatcher.handler();\n          //    return true;\n          //  }\n          //};\n\n          //function getLimitSafeDatetime(day, month, year) {\n          //\n          //  var datetime = new Date(year, month, day).getTime();\n          //\n          //  if (!x.DateUtils.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n          //    if (!x.DateUtils.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n          //      datetime = settings.startDateTime;\n          //    } else if (!x.DateUtils.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n          //      datetime = settings.endDateTime;\n          //    }\n          //  }\n          //\n          //  return datetime;\n          //}\n\n          //function updateModel(datetime) {\n          //  ngModelWatcher.stop();\n          //  scope.data.selected = new DateModel(datetime);\n          //  scope.ngModel = scope.data.selected;\n          //  ngModelWatcher.start(onModelChange);\n          //}\n\n          //function onModelChange(datetime, oldValue) {\n          //  if (datetime === oldValue) {\n          //    return;\n          //  }\n          //\n          //  var day = x.DateUtils.getDay(datetime);\n          //  var month = x.DateUtils.getMonth(datetime);\n          //  var year = x.DateUtils.getYear(datetime);\n          //\n          //  datetime = getLimitSafeDatetime(day, month, year);\n          //  updateModel(datetime);\n          //\n          //  scope.data.reloadYearsList();\n          //  scope.data.reloadMonthList();\n          //  scope.data.reloadDaysList();\n          //}\n\n          function copyObj(obj) {\n            return JSON.parse(JSON.stringify(obj));\n          }\n\n          function getDt(obj) {\n            return (obj && obj.dt) ? copyObj(obj.dt) : null;\n          }\n\n          var x;\n\n          function _initData() {\n            var modelDt = getDt(scope.ngModel) || +(new Date());\n            var startDt = getDt(scope.apdStart);\n            var endDt = getDt(scope.apdEnd);\n\n            x = new xDateCore(modelDt, startDt, endDt);\n\n            scope.lists = {\n              d: x.ListsState.list.day,\n              m: x.ListsState.list.month,\n              y: x.ListsState.list.year\n            };\n\n            scope.ngModel = copyObj(x.State.selected);\n          }\n\n\n          var isUpdateFromCore = false;\n\n          //scope.$watch('ngModel', function (newModel, oldModel) {\n          //\n          //  if (!x) return;\n          //  if (!x.DateUtils.isValidModel(newModel)) return;\n          //  if (newModel.dt === oldModel.dt) return;\n          //  if (isUpdateFromCore) return;\n          //\n          //  isUpdateFromCore = true;\n          //  x.State.setSelected(newModel.dt);\n          //  scope.ngModel = copyObj(x.State.selected);\n          //  isUpdateFromCore = false;\n          //\n          //}, true);\n\n\n          //scope.onDaySelectChanged = function (day) {\n          //  if (!day) return;\n          //\n          //  var datetime = getLimitSafeDatetime(scope.data.selected.d, scope.data.selected.m, scope.data.selected.y);\n          //  updateModel(datetime);\n          //};\n          //\n          //scope.onMonthSelectChanged = function (month) {\n          //  if (!month && month !== 0) return;\n          //\n          //  var datetime;\n          //  var year = scope.data.selected.y;\n          //  var day = scope.data.selected.d;\n          //\n          //  datetime = getLimitSafeDatetime(day, month, year);\n          //  updateModel(datetime);\n          //\n          //  scope.data.reloadDaysList();\n          //};\n          //\n          //scope.onYearSelectChanged = function (year) {\n          //  if (!year && year !== 0) return;\n          //\n          //  var month = scope.data.selected.m;\n          //  var day = scope.data.selected.d;\n          //\n          //  var datetime = getLimitSafeDatetime(day, month, year);\n          //  updateModel(datetime);\n          //\n          //  scope.data.reloadMonthList();\n          //  scope.data.reloadDaysList();\n          //};\n\n          (function _init() {\n            _initData();\n\n            //scope.daysList = (scope.apdLocalization && scope.apdLocalization.daysList) ? scope.apdLocalization.daysList : Config.daysList;\n            //scope.monthList = (scope.apdLocalization && scope.apdLocalization.monthList) ? scope.apdLocalization.monthList : Config.monthList;\n\n            //ngModelWatcher.start(onModelChange);\n          })();\n\n        }\n      }\n    })\n;\nangular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=lists.d ng-options=\\\"day for day in data.list.d\\\" ng-init=\\\"data.selected.d = data.list.d[0]\\\" class=\\\"apd_elem apd_select_day apd_select\\\"></select><span ng-bind=daysList[lists.dow] class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=lists.m ng-options=\\\"monthList[month] for month in data.list.m\\\" ng-init=\\\"data.selected.m = data.list.m[0]\\\" class=\\\"apd_elem apd_select_month apd_select\\\"></select><select ng-model=lists.y ng-options=\\\"year for year in data.list.y\\\" ng-init=\\\"data.selected.y = data.list.y[0]\\\" class=\\\"apd_elem apd_select_year apd_select\\\"></select></div>\");}]);"],"sourceRoot":"/source/"}