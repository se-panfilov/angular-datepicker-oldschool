{"version":3,"sources":["angular-pure-datepicker.js"],"names":["xDateCore","x","Config","isUtc","monthDirection","daysDirection","yearsDirection","defaultYearsCount","daysList","monthList","CommonUtils","isValidNumber","num","isNumber","isNaN","parseFloat","isNotInfinity","isFinite","getArrayOfNumbers","start","end","this","isReverse","targetLength","arr","Array","newArr","apply","result","map","d","n","reverse","intArraySort","direction","desc","a","b","DESC","sort","DataClass","_getSelected","model","isUpperStart","dt","isEqualStart","isLowerEnd","isEqualEnd","DateModel","Date","getTime","_data","_start","_end","_limitDates","exports","selected","list","y","m","reloadYearsList","selectedYear","DateUtils","getYear","startYear","endYear","YearsUtils","getYearsList","LimitsModel","now","reloadMonthList","startMonth","getMonth","endMonth","MonthUtils","getMonthList","reloadDaysList","selectedMonth","DaysUtils","getDaysList","Number","getDay","dow","getDayOfWeek","tz","getTimezoneOffset","getVal","method","date","call","prototype","getUTCDate","getDate","getUTCDay","getUTCFullYear","getFullYear","getUTCMonth","getDaysInMonth","month","year","isValidModel","isDateUpperStartLimit","isDateLowerEndLimit","isDateBetweenLimits","startDt","endDt","limitsModel","START_DAY","lastDayInMonth","isYearOfLowerLimit","isYearOfUpperLimit","isMonthOfLowerLimit","isMonthOfUpperLimit","isLowerLimit","isUpperLimit","_setStart","_setEnd","_setNow","START_MONTH","END_MONTH","_getLatestPossibleYear","yearsCount","_getFirstPossibleYear","_getRangeValues","nowYear","YEARS_COUNT","latestPossibleYear","firstPossibleYear","statement","isBoth","isBothNot","isOnlyStart","isOnlyEnd","isStartLower","isEndLower","isStartEqualEnd","isEndUpperNow","isEndEqualNow","from","to","range","angularView","angular","module","directive","restrict","replace","templateUrl","scope","ngModel","apdStart","apdEnd","apdDayId","apdMonthId","apdYearId","apdDayClasses","apdMonthClasses","apdYearClasses","apdLocalization","apdIsUtc","link","getLimitSafeDatetime","day","datetime","settings","startDateTime","endDateTime","updateModel","ngModelWatcher","stop","data","onModelChange","oldValue","getInitDateModel","initDatetime","isInitModelValid","limitSafeDatetime","_initData","initDateModel","handler","callback","$watch","value","onDaySelectChanged","onMonthSelectChanged","onYearSelectChanged","run","$templateCache","put"],"mappings":"AAAA,GAAIA,WAAY,WACd,YAEA,IAAIC,IACFC,QACEC,OAAO,EACPC,eAAgB,MAChBC,cAAe,MACfC,eAAgB,OAChBC,kBAAmB,GACnBC,UAAW,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAC7EC,WAAY,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,aAG5HC,aACEC,cAAe,SAASC,GACtB,GAAIC,IAAYC,MAAMC,WAAWH,IAC7BI,EAAgBC,SAASL,EAC7B,OAAOC,IAAYG,GAErBE,kBAAmB,SAASC,EAAOC,GAGjC,IAAKC,KAAKV,cAAcQ,KAAWE,KAAKV,cAAcS,GAAM,QAE5D,IAAIE,GAAaH,EAAQC,EACrBG,EAAeD,EAAaH,EAAQC,EAAO,EAAKA,EAAMD,EAAS,EAC/DK,EAAM,GAAIC,OAAMF,GAChBG,EAASD,MAAME,MAAM,KAAMH,GAC3BI,EAASF,EAAOG,IAAI,SAASC,EAAGC,GAClC,MAAO,GAAcA,EAAIX,EAAMW,EAAIZ,GAGrC,OAAO,GAAcS,EAAOI,UAAYJ,GAE1CK,aAAc,SAAST,EAAKU,GAG1B,QAASC,GAAKC,EAAGC,GACf,MAAOA,GAAID,EAHb,GAAIE,GAAO,MAMX,QAAQJ,GACN,QAAS,MAAOV,GAAIe,KAAK,SAASH,EAAGC,GACnC,MAAOD,GAAIC,GAEb,KAAKC,GACD,MAAOd,GAAIe,KAAKJ,MAK1BK,UACE,WAEE,QAASC,GAAaC,EAAOvB,EAAOC,GAClC,GAAIQ,GAEAe,EAAgBD,EAAME,GAAKzB,EAC3B0B,EAAgBH,EAAME,KAAOzB,EAC7B2B,EAAcJ,EAAME,GAAKxB,EACzB2B,EAAcL,EAAME,KAAOxB,CAa/B,OATEQ,GADGe,GAAgBE,GAAkBC,GAAcC,EAC1C,GAAI9C,GAAE+C,UAAUN,EAAME,IACrBD,EAEAA,EAGD,GAAI1C,GAAE+C,WAAU,GAAIC,OAAOC,WAF3B,GAAIjD,GAAE+C,UAAU5B,GAFhB,GAAInB,GAAE+C,UAAU7B,GAU7B,MAAO,UAASuB,EAAOvB,EAAOC,GAE5B,GAAI+B,IACFC,OAAQ,KACRC,KAAM,KACNC,YAAa,MAGXC,GACFC,YACAC,MACEC,EAAG,KACHC,EAAG,KACH7B,EAAG,MAEL8B,gBAAiB,WACf,GAAIC,GAAe5D,EAAE6D,UAAUC,QAAQR,EAAQC,SAASZ,IACpDoB,EAAY/D,EAAE6D,UAAUC,QAAQZ,EAAMC,QACtCa,EAAUhE,EAAE6D,UAAUC,QAAQZ,EAAME,KAGxC,OADAE,GAAQE,KAAKC,EAAIzD,EAAEiE,WAAWC,aAAaN,EAAcG,EAAWC,EAASd,EAAMlD,EAAEmE,YAAYC,IAAIX,GAC9FrC,MAETiD,gBAAiB,WACf,GAAIT,GAAe5D,EAAE6D,UAAUC,QAAQR,EAAQC,SAASZ,IACpD2B,EAAatE,EAAE6D,UAAUU,SAASrB,EAAMC,QACxCqB,EAAWxE,EAAE6D,UAAUU,SAASrB,EAAME,KAE1C,OADAE,GAAQE,KAAKE,EAAI1D,EAAEyE,WAAWC,aAAaJ,EAAYE,EAAUZ,EAAcV,EAAMlD,EAAEmE,aAChF/C,MAETuD,eAAgB,WACd,GAAIf,GAAe5D,EAAE6D,UAAUC,QAAQR,EAAQC,SAASZ,IACpDiC,EAAgB5E,EAAE6D,UAAUU,SAASjB,EAAQC,SAASZ,GAE1D,OADAW,GAAQE,KAAK3B,EAAI7B,EAAE6E,UAAUC,YAAY5B,EAAMC,OAAQD,EAAME,KAAMQ,EAAcgB,EAAe1B,EAAMlD,EAAEmE,aACjG/C,MAIXqB,GAAME,GAAK3C,EAAES,YAAYC,cAAc+B,EAAME,IAAMF,EAAME,GAAK,KAC9DzB,EAAQlB,EAAES,YAAYC,cAAcQ,GAASA,EAAQ,KACrDC,EAAMnB,EAAES,YAAYC,cAAcS,GAAOA,EAAM,KAE/CmC,EAAQC,SAAWf,EAAaC,EAAOvB,EAAOC,EAC9C,IAAIyC,GAAe5D,EAAE6D,UAAUC,QAAQR,EAAQC,SAASZ,IACpDiC,EAAgB5E,EAAE6D,UAAUU,SAASjB,EAAQC,SAASZ,GAU1D,OARAO,GAAMlD,EAAEmE,YAAc,GAAInE,GAAEmE,YAAYjD,EAAOC,GAC/C+B,EAAMC,OAASjC,EACfgC,EAAME,KAAOjC,EAEbmC,EAAQE,KAAKC,EAAIzD,EAAEiE,WAAWC,aAAaN,EAAcV,EAAMlD,EAAEmE,YAAYjD,MAAMuC,EAAGP,EAAMlD,EAAEmE,YAAYhD,IAAIsC,EAAGP,EAAMlD,EAAEmE,YAAYC,IAAIX,GACzIH,EAAQE,KAAKE,EAAI1D,EAAEyE,WAAWC,aAAaxD,EAAOC,EAAKyC,EAAcV,EAAMlD,EAAEmE,aAC7Eb,EAAQE,KAAK3B,EAAI7B,EAAE6E,UAAUC,YAAY5D,EAAOC,EAAKyC,EAAcgB,EAAe1B,EAAMlD,EAAEmE,aAEnFb,MAIbP,UACE,WACE,MAAO,UAAmBJ,GACxB,IAAKA,GAAMoC,OAAOlE,OAAO8B,KAAQoC,OAAO/D,UAAU2B,GAAK,KAAM,aAQ7D,OAPAvB,MAAKS,EAAI7B,EAAE6D,UAAUmB,QAAQrC,GAC7BvB,KAAK6D,IAAMjF,EAAE6D,UAAUqB,cAAcvC,GACrCvB,KAAKsC,EAAI1D,EAAE6D,UAAUU,UAAU5B,GAC/BvB,KAAKqC,EAAIzD,EAAE6D,UAAUC,SAASnB,GAC9BvB,KAAKuB,IAAMA,EACXvB,KAAK+D,GAAK,GAAInC,OAAML,GAAIyC,oBAEjBhE,SAIbyC,UACE,WAEE,QAASwB,GAAO1C,EAAI2C,GAClB,GAAIC,GAAO,GAAIvC,OAAML,EACrB,OAAQ4C,IAAQD,EAAUA,EAAOE,KAAKD,GAAQ,KAGhD,GAAIjC,IACF0B,OAAQ,SAASrC,GACf,IAAKA,GAAa,IAAPA,EAAU,MAAO,KAC5B,IAAI2C,GAAUtF,EAAEC,OAAY,MAAI+C,KAAKyC,UAAUC,WAAa1C,KAAKyC,UAAUE,OAC3E,OAAON,GAAO1C,EAAI2C,IAEpBJ,aAAc,SAASvC,GACrB,IAAKA,GAAa,IAAPA,EAAU,MAAO,KAC5B,IAAI2C,GAAUtF,EAAEC,OAAY,MAAI+C,KAAKyC,UAAUG,UAAY5C,KAAKyC,UAAUT,MAC1E,OAAOK,GAAO1C,EAAI2C,IAEpBxB,QAAS,SAASnB,GAChB,IAAKA,GAAa,IAAPA,EAAU,MAAO,KAC5B,IAAI2C,GAAUtF,EAAEC,OAAY,MAAI+C,KAAKyC,UAAUI,eAAiB7C,KAAKyC,UAAUK,WAC/E,OAAOT,GAAO1C,EAAI2C,IAEpBf,SAAU,SAAS5B,GACjB,IAAKA,GAAa,IAAPA,EAAU,MAAO,KAC5B,IAAI2C,GAAUtF,EAAEC,OAAY,MAAI+C,KAAKyC,UAAUM,YAAc/C,KAAKyC,UAAUlB,QAC5E,OAAOc,GAAO1C,EAAI2C,IAEpBU,eAAgB,SAASC,EAAOC,GAC9B,GAAIZ,GAAUtF,EAAEC,OAAY,MAAI+C,KAAKyC,UAAUC,WAAa1C,KAAKyC,UAAUE,OAC3E,OAAOL,GAAOE,KAAK,GAAIxC,OAAMkD,GAAQD,EAAS,EAAG,KAEnDE,aAAc,SAAS1D,GACrB,QAASA,MAAYA,EAAME,IAAmB,IAAbF,EAAME,MAAcoC,OAAOlE,OAAO4B,EAAME,KAAOoC,OAAO/D,UAAUyB,EAAME,KAEzGyD,sBAAuB,SAASzD,EAAIzB,GAClC,IAAKA,EAAO,OAAO,CAEnB,KAAMyB,GAAa,IAAPA,GAAaoC,OAAOlE,OAAO8B,IAAOoC,OAAOlE,OAAOK,GAAQ,KAAM,aAE1E,QAASyB,GAAMzB,GAEjBmF,oBAAqB,SAAS1D,EAAIxB,GAChC,IAAKA,EAAK,OAAO,CAEjB,IAAI4D,OAAOlE,OAAO8B,IAAOoC,OAAOlE,OAAOM,GAAM,KAAM,aAEnD,QAAeA,GAANwB,GAEX2D,oBAAqB,SAAS3D,EAAIzB,EAAOC,GAEvC,MAAQmC,GAAQ8C,sBAAsBzD,EAAIzB,IAAUoC,EAAQ+C,oBAAoB1D,EAAIxB,IAKxF,OAAOmC,MAGXuB,WACEC,YAAa,SAASyB,EAASC,EAAON,EAAMD,EAAOQ,GACjD,GAAI9E,GACA+E,EAAY,EACZC,EAAiB3G,EAAE6D,UAAUmC,eAAeC,EAAOC,EAEvD,IAAIK,GAAWC,EAAO,CACpB,GAAII,GAAqB,EAAYH,EAAYvF,MAAMuC,IAAMyC,GAAO,EAChEW,EAAqB,EAAUJ,EAAYtF,IAAIsC,IAAMyC,GAAO,EAC5DY,EAAsB,EAAYL,EAAYvF,MAAMwC,IAAMuC,GAAQ,EAClEc,EAAsB,EAAUN,EAAYtF,IAAIuC,IAAMuC,GAAQ,EAE9De,EAAgBJ,GAAsBE,EACtCG,EAAgBJ,GAAsBE,EAEtC7F,EAAQ,EAAYuF,EAAYvF,MAAMW,EAAI6E,EAC1CvF,EAAM,EAAUsF,EAAYtF,IAAIU,EAAI8E,CAGtChF,GADEqF,GAAgBC,EACTjH,EAAES,YAAYQ,kBAAkBC,EAAOC,GACvC6F,IAAiBC,EACjBjH,EAAES,YAAYQ,kBAAkBC,EAAOyF,IACtCK,GAAgBC,EACjBjH,EAAES,YAAYQ,kBAAkByF,EAAWvF,GAE3CnB,EAAES,YAAYQ,kBAAkByF,EAAWC,OAGtDhF,GAAS3B,EAAES,YAAYQ,kBAAkByF,EAAWC,EAGtD,OAAO3G,GAAES,YAAYuB,aAAaL,EAAQ3B,EAAEC,OAAOG,iBAIvD+D,YACE,WACE,MAAO,UAAqBjD,EAAOC,GAQjC,QAAS+F,GAAUvE,GAMjB,MALAW,GAAQpC,MAAMW,EAAI7B,EAAE6D,UAAUmB,QAAQrC,GACtCW,EAAQpC,MAAMwC,EAAI1D,EAAE6D,UAAUU,UAAU5B,GACxCW,EAAQpC,MAAMuC,EAAIzD,EAAE6D,UAAUC,SAASnB,GACvCW,EAAQpC,MAAMyB,IAAMA,EAEbvB,KAGT,QAAS+F,GAAQxE,GAMf,MALAW,GAAQnC,IAAIU,EAAI7B,EAAE6D,UAAUmB,QAAQrC,GACpCW,EAAQnC,IAAIuC,EAAI1D,EAAE6D,UAAUU,UAAU5B,GACtCW,EAAQnC,IAAIsC,EAAIzD,EAAE6D,UAAUC,SAASnB,GACrCW,EAAQnC,IAAIwB,IAAMA,EAEXvB,KAGT,QAASgG,KACP,GAAIzE,IAAK,GAAIK,OAAOC,SAMpB,OALAK,GAAQc,IAAIvC,EAAI7B,EAAE6D,UAAUmB,OAAOrC,GACnCW,EAAQc,IAAIV,EAAI1D,EAAE6D,UAAUU,SAAS5B,GACrCW,EAAQc,IAAIX,EAAIzD,EAAE6D,UAAUC,QAAQnB,GACpCW,EAAQc,IAAIzB,GAAKA,EAEVvB,KA/BT,GAAIkC,IACFpC,SACAC,OACAiD,OAoCF,OALIlD,IAAOgG,EAAUhG,GACjBC,GAAKgG,EAAQhG,GACjBiG,IAGO9D,MAIbmB,WACE,WACE,OACEC,aAAc,SAAS6B,EAASC,EAAO5C,EAAc6C,GACnD,GAAI9E,GACA0F,EAAc,EACdC,EAAY,EAEhB,IAAIf,GAAWC,EAAO,CACpB,GAAII,GAAqB,EAAYH,EAAYvF,MAAMuC,IAAMG,GAAe,EACxEiD,EAAqB,EAAUJ,EAAYtF,IAAIsC,IAAMG,GAAe,EACpE1C,EAAQ,EAAYuF,EAAYvF,MAAMwC,EAAI2D,EAC1ClG,EAAM,EAAUsF,EAAYtF,IAAIuC,EAAI4D,CAItC3F,GADEiF,GAAsBC,EACf7G,EAAES,YAAYQ,kBAAkBC,EAAOC,GACvCyF,IAAuBC,EACvB7G,EAAES,YAAYQ,kBAAkBC,EAAOoG,IACtCV,GAAsBC,EACvB7G,EAAES,YAAYQ,kBAAkBoG,EAAalG,GAE7CnB,EAAES,YAAYQ,kBAAkBoG,EAAaC,OAGxD3F,GAAS3B,EAAES,YAAYQ,kBAAkBoG,EAAaC,EAGxD,OAAOtH,GAAES,YAAYuB,aAAaL,EAAQ3B,EAAEC,OAAOE,qBAK3D8D,WACE,WAEE,QAASsD,GAAuBC,EAAY5D,EAAcQ,GACxD,GAAIzC,GAAUiC,EAAeQ,EAAOR,EAAeQ,CAEnD,OADAzC,IAAW6F,EAAa,EAI1B,QAASC,GAAsBD,EAAY5D,EAAcQ,GACvD,GAAIzC,GAAyByC,EAAfR,EAAsBA,EAAeQ,CAEnD,OADAzC,IAAW6F,EAAa,EAI1B,QAASE,GAAgB9D,EAAcG,EAAWC,EAAS2D,GAEzD,GAAIC,GAAc5H,EAAEC,OAAOK,kBACvBuH,EAAqBN,EAAuBK,EAAahE,EAAc+D,GACvEG,EAAoBL,EAAsBG,EAAahE,EAAc+D,GAErEI,GACFC,UAAWjE,IAAaC,GACxBiE,YAAelE,GAAcC,GAC7BkE,eAAgBnE,GAAcC,GAC9BmE,YAAepE,IAAaC,GAC5BoE,aAA2BpE,EAAZD,EACfsE,WAAatE,EAAYC,EACzBsE,gBAAkBvE,IAAcC,EAChCuE,cAAgBvE,EAAU2D,EAC1Ba,cAAgBxE,IAAY2D,EAI9B,IAAII,EAAUC,QAAUD,EAAUK,aAChC,OACEK,KAAM1E,EACN2E,GAAI1E,EAKR,IAAI+D,EAAUC,QAAUD,EAAUM,WAChC,OACEI,KAAMzE,EACN0E,GAAI3E,EAKR,IAAIgE,EAAUC,QAAUD,EAAUO,gBAChC,OACEG,KAAM1E,EACN2E,GAAI1E,EAKR,IAAI+D,EAAUG,YACZ,OACEO,KAAM1E,EACN2E,GAAIb,EAKR,IAAIE,EAAUI,UAAW,CAEvB,GAAIJ,EAAUQ,eAAiBR,EAAUS,cAEvC,MAAKV,GAAoBF,EAAgB5D,EAAU4D,GAE/Ca,KAAMX,EACNY,GAAI1E,IAIJyE,KAAMzE,GAAW4D,EAAc,GAC/Bc,GAAI1E,EAMV,KAAK+D,EAAUQ,cACb,OACEE,KAAMzE,GAAW4D,EAAc,GAC/Bc,GAAI1E,GAMV,MAAI+D,GAAUE,WAEVQ,KAAMX,EACNY,GAAIb,GAHR,OAQF,GAAIvE,IACFY,aAAc,SAASN,EAAcG,EAAWC,EAAS2D,GACvD,GAAIgB,GAAQjB,EAAgB9D,EAAcG,EAAWC,EAAS2D,GAC1DhG,EAAS3B,EAAES,YAAYQ,kBAAkB0H,EAAMF,KAAME,EAAMD,GAE/D,OAAO1I,GAAES,YAAYuB,aAAaL,EAAQ3B,EAAEC,OAAOI,iBAKvD,OAAOiD,MAGb,OAAOtD,MAEL4I,YAAc,SAAW/E,EAAWtB,EAAWtC,EAAQ8C,GACvD,YAGA8F,SAAQC,OAAO,cACX,yBAGCC,UAAU,iBAAkB,WACzB,OACIC,SAAU,IACVC,SAAS,EACTC,YAAa,WACbC,OACIC,QAAS,IACTC,SAAU,KACVC,OAAQ,KACRC,SAAU,KACVC,WAAY,KACZC,UAAW,KACXC,cAAe,KACfC,gBAAiB,KACjBC,eAAgB,KAChBC,gBAAiB,KACjBC,SAAU,MAEdC,KAAM,SAAUZ,GA4BZ,QAASa,GAAqBC,EAAKhE,EAAOC,GAEtC,GAAIgE,GAAW,GAAIlH,MAAKkD,EAAMD,EAAOgE,GAAKhH,SAU1C,OARKY,GAAUyC,oBAAoB4D,EAAUC,EAASC,cAAeD,EAASE,eACrExG,EAAUuC,sBAAsB8D,EAAUC,EAASC,eAE5CvG,EAAUwC,oBAAoB6D,EAAUC,EAASE,eACzDH,EAAWC,EAASE,aAFpBH,EAAWC,EAASC,eAMrBF,EAGX,QAASI,GAAYJ,GACjBK,EAAeC,OACfrB,EAAMsB,KAAKlH,SAAW,GAAIR,GAAUmH,GACpCf,EAAMC,QAAUD,EAAMsB,KAAKlH,SAC3BgH,EAAerJ,MAAMwJ,GAGzB,QAASA,GAAcR,EAAUS,GAC7B,GAAIT,IAAaS,EAAjB,CAIA,GAAIV,GAAMpG,EAAUmB,OAAOkF,GACvBjE,EAAQpC,EAAUU,SAAS2F,GAC3BhE,EAAOrC,EAAUC,QAAQoG,EAE7BA,GAAWF,EAAqBC,EAAKhE,EAAOC,GAC5CoE,EAAYJ,GAEZf,EAAMsB,KAAK9G,kBACXwF,EAAMsB,KAAKpG,kBACX8E,EAAMsB,KAAK9F,kBAGf,QAASiG,GAAiBnI,GACtB,GACIoI,GADAC,EAAmBjH,EAAUsC,aAAa1D,EAI1CoI,GADAC,EACerI,EAAME,IAEN,GAAIK,OAAOC,SAG9B,IAAIgH,GAAMpG,EAAUmB,OAAO6F,GACvB5E,EAAQpC,EAAUU,SAASsG,GAC3B3E,EAAOrC,EAAUC,QAAQ+G,GAEzBE,EAAoBf,EAAqBC,EAAKhE,EAAOC,EAEzD,OAAO,IAAInD,GAAUgI,GAGzB,QAASC,GAAUC,EAAeb,EAAeC,GAC7ClB,EAAMsB,KAAO,GAAIlI,GAAU0I,EAAeb,EAAeC,GACzDlB,EAAMC,QAAUD,EAAMsB,KAAKlH,SAvF/B4F,EAAMW,SAAWX,EAAMW,WAAY,CAInC,IAAIK,IACAc,cAAe,KACfb,cAAe,KACfC,YAAa,MAGbE,GACAW,QAAS,KACThK,MAAO,SAAUiK,GACbZ,EAAeW,QAAU/B,EAAMiC,OAAO,aAAc,SAAUC,EAAOV,GAC7DQ,GACAA,EAASE,EAAOV,KAGrB,IAEPH,KAAM,WAEF,MADAD,GAAeW,WACR,GAqEf/B,GAAMmC,mBAAqB,SAAUrB,GACjC,GAAKA,EAAL,CAEA,GAAIC,GAAWF,EAAqBb,EAAMsB,KAAKlH,SAAS1B,EAAGsH,EAAMsB,KAAKlH,SAASG,EAAGyF,EAAMsB,KAAKlH,SAASE,EACtG6G,GAAYJ,KAGhBf,EAAMoC,qBAAuB,SAAUtF,GACnC,GAAKA,GAAmB,IAAVA,EAAd,CAEA,GAAIiE,GACAhE,EAAOiD,EAAMsB,KAAKlH,SAASE,EAC3BwG,EAAMd,EAAMsB,KAAKlH,SAAS1B,CAE9BqI,GAAWF,EAAqBC,EAAKhE,EAAOC,GAC5CoE,EAAYJ,GAEZf,EAAMsB,KAAK9F,mBAGfwE,EAAMqC,oBAAsB,SAAUtF,GAClC,GAAKA,GAAiB,IAATA,EAAb,CAEA,GAAID,GAAQkD,EAAMsB,KAAKlH,SAASG,EAC5BuG,EAAMd,EAAMsB,KAAKlH,SAAS1B,EAE1BqI,EAAWF,EAAqBC,EAAKhE,EAAOC,EAChDoE,GAAYJ,GAEZf,EAAMsB,KAAKpG,kBACX8E,EAAMsB,KAAK9F,mBAGf,WACIwF,EAASC,cAAiBjB,EAAc,UAAKA,EAAME,SAAW,KAC9Dc,EAASE,YAAelB,EAAY,QAAKA,EAAMG,OAAS,KACxDa,EAASc,cAAgBL,EAAiBzB,EAAMC,SAChD4B,EAAUb,EAASc,cAAed,EAASC,cAAeD,EAASE,aAEnElB,EAAM5I,SAAY4I,EAAMU,iBAAmBV,EAAMU,gBAAgBtJ,SAAY4I,EAAMU,gBAAgBtJ,SAAYN,EAAOM,SACtH4I,EAAM3I,UAAa2I,EAAMU,iBAAmBV,EAAMU,gBAAgBrJ,UAAa2I,EAAMU,gBAAgBrJ,UAAaP,EAAOO,UAEzH+J,EAAerJ,MAAMwJ,WAM1C3K,UAAU8D,UAAW9D,UAAUwC,UAAWxC,UAAUE,OAAQF,UAAUgD,UACzE8F,SAAQC,OAAO,2BAA4B2C,KAAK,iBAAkB,SAASC,GAAiBA,EAAeC,IAAI,WAAW","file":"angular-pure-datepicker.min.js","sourcesContent":["var xDateCore = (function() {\n  'use strict';\n\n  var x = {\n    Config: {\n      isUtc: false,\n      monthDirection: 'asc',\n      daysDirection: 'asc',\n      yearsDirection: 'desc',\n      defaultYearsCount: 50,\n      daysList: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n      monthList: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December']\n    },\n\n    CommonUtils: {\n      isValidNumber: function(num) {\n        var isNumber = !isNaN(parseFloat(num));\n        var isNotInfinity = isFinite(num);\n        return isNumber && isNotInfinity;\n      },\n      getArrayOfNumbers: function(start, end) {\n        //TODO (S.Panfilov) check this in after build\n        //if (!exports.isValidNumber(start) || !exports.isValidNumber(end)) return [];\n        if (!this.isValidNumber(start) || !this.isValidNumber(end)) return [];\n\n        var isReverse = (start > end);\n        var targetLength = isReverse ? (start - end) + 1 : (end - start) + 1;\n        var arr = new Array(targetLength);\n        var newArr = Array.apply(null, arr);\n        var result = newArr.map(function(d, n) {\n          return (isReverse) ? n + end : n + start;\n        });\n\n        return (isReverse) ? result.reverse() : result;\n      },\n      intArraySort: function(arr, direction) {\n        var DESC = 'desc';\n\n        function desc(a, b) {\n          return b - a;\n        }\n\n        switch (direction) {\n          default: return arr.sort(function(a, b) {\n            return a - b;\n          });\n          case DESC:\n              return arr.sort(desc);\n        }\n      }\n    },\n\n    DataClass:\n      (function() {\n\n        function _getSelected(model, start, end) {\n          var result;\n\n          var isUpperStart = (model.dt > start);\n          var isEqualStart = (model.dt === start);\n          var isLowerEnd = (model.dt > end);\n          var isEqualEnd = (model.dt === end);\n\n          //start == 1; model == 1 or 2 or 3; end == 3;\n          if ((isUpperStart || isEqualStart) || (isLowerEnd || isEqualEnd)) {\n            result = new x.DateModel(model.dt);\n          } else if (!isUpperStart) { //start == 1; model == 0\n            result = new x.DateModel(start);\n          } else if (!isUpperStart) { //model == 4; end == 3;\n            result = new x.DateModel(end);\n          } else { //paranoid case\n            result = new x.DateModel(new Date().getTime());\n          }\n\n          return result;\n        }\n\n        return function(model, start, end) {\n\n          var _data = {\n            _start: null,\n            _end: null,\n            _limitDates: null\n          };\n\n          var exports = {\n            selected: {},\n            list: {\n              y: null,\n              m: null,\n              d: null\n            },\n            reloadYearsList: function() {\n              var selectedYear = x.DateUtils.getYear(exports.selected.dt);\n              var startYear = x.DateUtils.getYear(_data._start);\n              var endYear = x.DateUtils.getYear(_data._end);\n              //exports.list.y = x.YearsUtils.getYearsList(selectedYear, _data._start, _data._end, _data.x.LimitsModel.now.y);\n              exports.list.y = x.YearsUtils.getYearsList(selectedYear, startYear, endYear, _data.x.LimitsModel.now.y);\n              return this;\n            },\n            reloadMonthList: function() {\n              var selectedYear = x.DateUtils.getYear(exports.selected.dt);\n              var startMonth = x.DateUtils.getMonth(_data._start);\n              var endMonth = x.DateUtils.getMonth(_data._end);\n              exports.list.m = x.MonthUtils.getMonthList(startMonth, endMonth, selectedYear, _data.x.LimitsModel);\n              return this;\n            },\n            reloadDaysList: function() {\n              var selectedYear = x.DateUtils.getYear(exports.selected.dt);\n              var selectedMonth = x.DateUtils.getMonth(exports.selected.dt);\n              exports.list.d = x.DaysUtils.getDaysList(_data._start, _data._end, selectedYear, selectedMonth, _data.x.LimitsModel);\n              return this;\n            }\n          };\n\n          model.dt = x.CommonUtils.isValidNumber(model.dt) ? model.dt : null;\n          start = x.CommonUtils.isValidNumber(start) ? start : null;\n          end = x.CommonUtils.isValidNumber(end) ? end : null;\n\n          exports.selected = _getSelected(model, start, end);\n          var selectedYear = x.DateUtils.getYear(exports.selected.dt);\n          var selectedMonth = x.DateUtils.getMonth(exports.selected.dt);\n\n          _data.x.LimitsModel = new x.LimitsModel(start, end);\n          _data._start = start;\n          _data._end = end;\n\n          exports.list.y = x.YearsUtils.getYearsList(selectedYear, _data.x.LimitsModel.start.y, _data.x.LimitsModel.end.y, _data.x.LimitsModel.now.y);\n          exports.list.m = x.MonthUtils.getMonthList(start, end, selectedYear, _data.x.LimitsModel);\n          exports.list.d = x.DaysUtils.getDaysList(start, end, selectedYear, selectedMonth, _data.x.LimitsModel);\n\n          return exports;\n        }\n      })(),\n\n    DateModel:\n      (function() {\n        return function DateModel(dt) {\n          if (!dt || Number.isNaN(+dt) || !Number.isFinite(+dt)) throw 'NaN or null';\n          this.d = x.DateUtils.getDay(+dt);\n          this.dow = x.DateUtils.getDayOfWeek(+dt);\n          this.m = x.DateUtils.getMonth(+dt);\n          this.y = x.DateUtils.getYear(+dt);\n          this.dt = +dt;\n          this.tz = new Date(+dt).getTimezoneOffset();\n\n          return this;\n        };\n      })(),\n\n    DateUtils:\n      (function() {\n\n        function getVal(dt, method) {\n          var date = new Date(+dt);\n          return (date && method) ? method.call(date) : null;\n        }\n\n        var exports = {\n          getDay: function(dt) {\n            if (!dt && dt !== 0) return null;\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCDate : Date.prototype.getDate;\n            return getVal(dt, method);\n          },\n          getDayOfWeek: function(dt) {\n            if (!dt && dt !== 0) return null;\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCDay : Date.prototype.getDay;\n            return getVal(dt, method);\n          },\n          getYear: function(dt) {\n            if (!dt && dt !== 0) return null;\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCFullYear : Date.prototype.getFullYear;\n            return getVal(dt, method);\n          },\n          getMonth: function(dt) {\n            if (!dt && dt !== 0) return null;\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCMonth : Date.prototype.getMonth;\n            return getVal(dt, method);\n          },\n          getDaysInMonth: function(month, year) {\n            var method = (x.Config.isUtc) ? Date.prototype.getUTCDate : Date.prototype.getDate;\n            return method.call(new Date(+year, (+month) + 1, 0));\n          },\n          isValidModel: function(model) {\n            return !!model && (!!model.dt || model.dt === 0) && !Number.isNaN(+model.dt) && Number.isFinite(+model.dt);\n          },\n          isDateUpperStartLimit: function(dt, start) {\n            if (!start) return true;\n            //TODO (S.Panfilov) should be a const\n            if ((!dt && dt !== 0) || Number.isNaN(+dt) || Number.isNaN(+start)) throw 'NaN or null';\n            //TODO (S.Panfilov) may be (+dt >= +end)\n            return (+dt > +start);\n          },\n          isDateLowerEndLimit: function(dt, end) {\n            if (!end) return true;\n            //TODO (S.Panfilov) should be a const\n            if (Number.isNaN(+dt) || Number.isNaN(+end)) throw 'NaN or null';\n            //TODO (S.Panfilov) may be (+dt <= +end)\n            return (+dt < +end);\n          },\n          isDateBetweenLimits: function(dt, start, end) {\n            //TODO (S.Panfilov) lowerAndEqual and UpperAndEqual?\n            return (exports.isDateUpperStartLimit(dt, start) && exports.isDateLowerEndLimit(dt, end));\n          }\n        };\n\n\n        return exports;\n      })(),\n\n    DaysUtils: {\n      getDaysList: function(startDt, endDt, year, month, limitsModel) {\n        var result;\n        var START_DAY = 1;\n        var lastDayInMonth = x.DateUtils.getDaysInMonth(month, year);\n\n        if (startDt || endDt) {\n          var isYearOfLowerLimit = (startDt) ? limitsModel.start.y === year : false;\n          var isYearOfUpperLimit = (endDt) ? limitsModel.end.y === year : false;\n          var isMonthOfLowerLimit = (startDt) ? limitsModel.start.m === month : false;\n          var isMonthOfUpperLimit = (endDt) ? limitsModel.end.m === month : false;\n\n          var isLowerLimit = (isYearOfLowerLimit && isMonthOfLowerLimit);\n          var isUpperLimit = (isYearOfUpperLimit && isMonthOfUpperLimit);\n\n          var start = (startDt) ? limitsModel.start.d : START_DAY;\n          var end = (endDt) ? limitsModel.end.d : lastDayInMonth;\n\n          if (isLowerLimit && isUpperLimit) {\n            result = x.CommonUtils.getArrayOfNumbers(start, end);\n          } else if (isLowerLimit && !isUpperLimit) {\n            result = x.CommonUtils.getArrayOfNumbers(start, lastDayInMonth);\n          } else if (!isLowerLimit && isUpperLimit) {\n            result = x.CommonUtils.getArrayOfNumbers(START_DAY, end);\n          } else { // in all other cases return array of 12 month\n            result = x.CommonUtils.getArrayOfNumbers(START_DAY, lastDayInMonth);\n          }\n        } else { // in all other cases return array of 12 month\n          result = x.CommonUtils.getArrayOfNumbers(START_DAY, lastDayInMonth);\n        }\n\n        return x.CommonUtils.intArraySort(result, x.Config.daysDirection);\n      }\n    },\n\n    LimitsModel:\n      (function() {\n        return function LimitsModel(start, end) {\n\n          var exports = {\n            start: {},\n            end: {},\n            now: {}\n          };\n\n          function _setStart(dt) {\n            exports.start.d = x.DateUtils.getDay(+dt);\n            exports.start.m = x.DateUtils.getMonth(+dt);\n            exports.start.y = x.DateUtils.getYear(+dt);\n            exports.start.dt = +dt;\n            //TODO (S.Panfilov) Possible strict violation\n            return this;\n          }\n\n          function _setEnd(dt) {\n            exports.end.d = x.DateUtils.getDay(+dt);\n            exports.end.m = x.DateUtils.getMonth(+dt);\n            exports.end.y = x.DateUtils.getYear(+dt);\n            exports.end.dt = +dt;\n            //TODO (S.Panfilov) Possible strict violation\n            return this;\n          }\n\n          function _setNow() {\n            var dt = new Date().getTime();\n            exports.now.d = x.DateUtils.getDay(dt);\n            exports.now.m = x.DateUtils.getMonth(dt);\n            exports.now.y = x.DateUtils.getYear(dt);\n            exports.now.dt = dt;\n            //TODO (S.Panfilov) Possible strict violation\n            return this;\n          }\n\n          if (start) _setStart(start);\n          if (end) _setEnd(end);\n          _setNow();\n\n\n          return exports;\n        };\n      })(),\n\n    MonthUtils:\n      (function() {\n        return {\n          getMonthList: function(startDt, endDt, selectedYear, limitsModel) {\n            var result;\n            var START_MONTH = 0;\n            var END_MONTH = 11;\n\n            if (startDt || endDt) {\n              var isYearOfLowerLimit = (startDt) ? limitsModel.start.y === selectedYear : false;\n              var isYearOfUpperLimit = (endDt) ? limitsModel.end.y === selectedYear : false;\n              var start = (startDt) ? limitsModel.start.m : START_MONTH;\n              var end = (endDt) ? limitsModel.end.m : END_MONTH;\n\n              // startYear == 2015, nowYear == 2015, endYear == 2015\n              if (isYearOfLowerLimit && isYearOfUpperLimit) {\n                result = x.CommonUtils.getArrayOfNumbers(start, end);\n              } else if (isYearOfLowerLimit && !isYearOfUpperLimit) { // startYear == 2015, nowYear == 2015, endYear == 2016 (or null)\n                result = x.CommonUtils.getArrayOfNumbers(start, END_MONTH);\n              } else if (!isYearOfLowerLimit && isYearOfUpperLimit) { // startYear == 2014 (or null), nowYear == 2015, endYear == 2015\n                result = x.CommonUtils.getArrayOfNumbers(START_MONTH, end);\n              } else { // in all other cases return array of 12 month\n                result = x.CommonUtils.getArrayOfNumbers(START_MONTH, END_MONTH);\n              }\n            } else { // in all other cases return array of 12 month\n              result = x.CommonUtils.getArrayOfNumbers(START_MONTH, END_MONTH);\n            }\n\n            return x.CommonUtils.intArraySort(result, x.Config.monthDirection);\n          }\n        };\n      })(),\n\n    YearsUtils:\n      (function() {\n\n        function _getLatestPossibleYear(yearsCount, selectedYear, now) {\n          var result = (selectedYear > now) ? selectedYear : now;\n          result += (yearsCount - 1);\n          return result;\n        }\n\n        function _getFirstPossibleYear(yearsCount, selectedYear, now) {\n          var result = (selectedYear < now) ? selectedYear : now;\n          result -= (yearsCount - 1);\n          return result;\n        }\n\n        function _getRangeValues(selectedYear, startYear, endYear, nowYear) {\n\n          var YEARS_COUNT = x.Config.defaultYearsCount;\n          var latestPossibleYear = _getLatestPossibleYear(YEARS_COUNT, selectedYear, nowYear);\n          var firstPossibleYear = _getFirstPossibleYear(YEARS_COUNT, selectedYear, nowYear);\n\n          var statement = {\n            isBoth: !!(startYear && endYear),\n            isBothNot: !!(!startYear && !endYear),\n            isOnlyStart: !!(startYear && !endYear),\n            isOnlyEnd: !!(!startYear && endYear),\n            isStartLower: (startYear < endYear),\n            isEndLower: (startYear > endYear),\n            isStartEqualEnd: (startYear === endYear),\n            isEndUpperNow: (endYear > nowYear),\n            isEndEqualNow: (endYear === nowYear)\n          };\n\n          //start = 2011, end = 2014\n          if (statement.isBoth && statement.isStartLower) {\n            return {\n              from: startYear,\n              to: endYear\n            };\n          }\n\n          //start = 2014, end = 2011\n          if (statement.isBoth && statement.isEndLower) {\n            return {\n              from: endYear,\n              to: startYear\n            };\n          }\n\n          //start = 2011, end = 2011\n          if (statement.isBoth && statement.isStartEqualEnd) {\n            return {\n              from: startYear,\n              to: endYear\n            };\n          }\n\n          //start = 2014, end = null\n          if (statement.isOnlyStart) {\n            return {\n              from: startYear,\n              to: latestPossibleYear\n            };\n          }\n\n          //start = null, end = 2014\n          if (statement.isOnlyEnd) {\n            //start = null, now = 2013 (or 2014), end = 2014\n            if (statement.isEndUpperNow || statement.isEndEqualNow) {\n              //TODO (S.Panfilov) wtf? I cannot remember wtf this statement check\n              if ((firstPossibleYear - YEARS_COUNT) > (endYear - YEARS_COUNT)) {\n                return {\n                  from: firstPossibleYear,\n                  to: endYear\n                };\n              } else {\n                return {\n                  from: endYear - (YEARS_COUNT - 1),\n                  to: endYear\n                };\n              }\n            }\n\n            //start = null, now = 2015,  end = 2014\n            if (!statement.isEndUpperNow) {\n              return {\n                from: endYear - (YEARS_COUNT - 1),\n                to: endYear\n              };\n            }\n          }\n\n          //start = null, end = null\n          if (statement.isBothNot) {\n            return {\n              from: firstPossibleYear,\n              to: latestPossibleYear\n            };\n          }\n        }\n\n        var exports = {\n          getYearsList: function(selectedYear, startYear, endYear, nowYear) {\n            var range = _getRangeValues(selectedYear, startYear, endYear, nowYear);\n            var result = x.CommonUtils.getArrayOfNumbers(range.from, range.to);\n\n            return x.CommonUtils.intArraySort(result, x.Config.yearsDirection);\n          }\n        };\n\n\n        return exports;\n      })()\n  };\n  return x;\n})();\nvar angularView = (function (DateUtils, DataClass, Config, DateModel) {\n    'use strict';\n\n\n    angular.module('angular-pd', [\n        'angular-pd.templates'\n    ])\n\n        .directive('pureDatepicker', function () {\n            return {\n                restrict: 'E',\n                replace: true,\n                templateUrl: 'apd.html',\n                scope: {\n                    ngModel: '=',\n                    apdStart: '=?',\n                    apdEnd: '=?',\n                    apdDayId: '@?',\n                    apdMonthId: '@?',\n                    apdYearId: '@?',\n                    apdDayClasses: '@?',\n                    apdMonthClasses: '@?',\n                    apdYearClasses: '@?',\n                    apdLocalization: '=?',\n                    apdIsUtc: '=?'\n                },\n                link: function (scope) {\n                    scope.apdIsUtc = scope.apdIsUtc || false;\n\n                    //TODO (S.Panfilov) check for cross-browser support\n                    //TODO (S.Panfilov) should add tests probably\n                    var settings = {\n                        initDateModel: null,\n                        startDateTime: null,\n                        endDateTime: null\n                    };\n\n                    var ngModelWatcher = {\n                        handler: null,\n                        start: function (callback) {\n                            ngModelWatcher.handler = scope.$watch('ngModel.dt', function (value, oldValue) {\n                                if (callback) {\n                                    callback(value, oldValue)\n                                }\n\n                            }, true);\n                        },\n                        stop: function () {\n                            ngModelWatcher.handler();\n                            return true;\n                        }\n                    };\n\n\n                    function getLimitSafeDatetime(day, month, year) {\n\n                        var datetime = new Date(year, month, day).getTime();\n\n                        if (!DateUtils.isDateBetweenLimits(datetime, settings.startDateTime, settings.endDateTime)) {\n                            if (!DateUtils.isDateUpperStartLimit(datetime, settings.startDateTime)) {\n                                datetime = settings.startDateTime;\n                            } else if (!DateUtils.isDateLowerEndLimit(datetime, settings.endDateTime)) {\n                                datetime = settings.endDateTime;\n                            }\n                        }\n\n                        return datetime;\n                    }\n\n                    function updateModel(datetime) {\n                        ngModelWatcher.stop();\n                        scope.data.selected = new DateModel(datetime);\n                        scope.ngModel = scope.data.selected;\n                        ngModelWatcher.start(onModelChange);\n                    }\n\n                    function onModelChange(datetime, oldValue) {\n                        if (datetime === oldValue) {\n                            return;\n                        }\n\n                        var day = DateUtils.getDay(datetime);\n                        var month = DateUtils.getMonth(datetime);\n                        var year = DateUtils.getYear(datetime);\n\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n\n                        scope.data.reloadYearsList();\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    }\n\n                    function getInitDateModel(model) {\n                        var isInitModelValid = DateUtils.isValidModel(model);\n                        var initDatetime;\n\n                        if (isInitModelValid) {\n                            initDatetime = model.dt\n                        } else {\n                            initDatetime = new Date().getTime();\n                        }\n\n                        var day = DateUtils.getDay(initDatetime);\n                        var month = DateUtils.getMonth(initDatetime);\n                        var year = DateUtils.getYear(initDatetime);\n\n                        var limitSafeDatetime = getLimitSafeDatetime(day, month, year);\n\n                        return new DateModel(limitSafeDatetime);\n                    }\n\n                    function _initData(initDateModel, startDateTime, endDateTime) {\n                        scope.data = new DataClass(initDateModel, startDateTime, endDateTime);\n                        scope.ngModel = scope.data.selected;\n                    }\n\n\n                    scope.onDaySelectChanged = function (day) {\n                        if (!day) return;\n\n                        var datetime = getLimitSafeDatetime(scope.data.selected.d, scope.data.selected.m, scope.data.selected.y);\n                        updateModel(datetime);\n                    };\n\n                    scope.onMonthSelectChanged = function (month) {\n                        if (!month && month !== 0) return;\n\n                        var datetime;\n                        var year = scope.data.selected.y;\n                        var day = scope.data.selected.d;\n\n                        datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n\n                        scope.data.reloadDaysList();\n                    };\n\n                    scope.onYearSelectChanged = function (year) {\n                        if (!year && year !== 0) return;\n\n                        var month = scope.data.selected.m;\n                        var day = scope.data.selected.d;\n\n                        var datetime = getLimitSafeDatetime(day, month, year);\n                        updateModel(datetime);\n\n                        scope.data.reloadMonthList();\n                        scope.data.reloadDaysList();\n                    };\n\n                    (function _init() {\n                        settings.startDateTime = (scope.apdStart) ? +scope.apdStart : null;\n                        settings.endDateTime = (scope.apdEnd) ? +scope.apdEnd : null;\n                        settings.initDateModel = getInitDateModel(scope.ngModel);\n                        _initData(settings.initDateModel, settings.startDateTime, settings.endDateTime);\n\n                        scope.daysList = (scope.apdLocalization && scope.apdLocalization.daysList) ? scope.apdLocalization.daysList :  Config.daysList;\n                        scope.monthList = (scope.apdLocalization && scope.apdLocalization.monthList) ? scope.apdLocalization.monthList :  Config.monthList;\n\n                        ngModelWatcher.start(onModelChange);\n                    })();\n\n                }\n            }\n        });\n})(xDateCore.DateUtils, xDateCore.DataClass, xDateCore.Config, xDateCore.DateModel);\nangular.module(\"angular-pd.templates\", []).run([\"$templateCache\", function($templateCache) {$templateCache.put(\"apd.html\",\"<div class=apd_root><select ng-model=data.selected.d ng-options=\\\"day for day in data.list.d\\\" ng-init=\\\"data.selected.d = data.list.d[0]\\\" ng-change=onDaySelectChanged(data.selected.d) id={{::apdDayId}} class=\\\"apd_elem apd_select_day apd_select {{::apdDayClasses}}\\\"></select><span ng-bind=daysList[data.selected.dow] class=\\\"apd_elem apd_day_of_week\\\"></span><select ng-model=data.selected.m ng-options=\\\"monthList[month] for month in data.list.m\\\" ng-init=\\\"data.selected.m = data.list.m[0]\\\" ng-change=onMonthSelectChanged(data.selected.m) id={{::apdMonthId}} class=\\\"apd_elem apd_select_month apd_select {{::apdMonthClasses}}\\\"></select><select ng-model=data.selected.y ng-options=\\\"year for year in data.list.y\\\" ng-init=\\\"data.selected.y = data.list.y[0]\\\" ng-change=onYearSelectChanged(data.selected.y) id={{::apdYearId}} class=\\\"apd_elem apd_select_year apd_select {{::apdYearClasses}}\\\"></select></div>\");}]);"],"sourceRoot":"/source/"}